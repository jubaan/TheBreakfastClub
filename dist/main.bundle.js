(()=>{"use strict";var n={387:(n,e,t)=>{var r=t(379),o=t.n(r),a=t(150);o()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;var i=t(535);function s(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var c=document.createElement("template");c.innerHTML='\n  <nav class="navbar">\n    <a class="navbar__brand" href="./index.html">\n      <img class="brand__logo" src="https://img.icons8.com/ios/32/000000/coffee-to-go.png"/>\n      <img class="brand__logo" src="https://img.icons8.com/ios/50/000000/bread-loaf.png"/>\n      <img class="brand__logo" src="https://img.icons8.com/ios/50/000000/sunny-side-up-eggs.png"/>\n      BREAKFAST CLUB\n    </a>\n\n    <ul class="navbar__menu">\n      <li class="menu__item"><a data-type="theClub" class="menu__link theClub active" href="#">The Club</a></li>\n      <li class="menu__item"><a data-type="theBreakfast" class="menu__link theBreakfast" href="#">The Breakfast</a></li>\n      <li class="menu__item"><a data-type="ourLocations" class="menu__link ourLocations" href="#">Our Locations</a></li>\n    </ul>\n  </nav>\n  <script src="./switchTab"><\/script>\n';const l=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n)}var e,t;return e=n,(t=[{key:"navbar",value:function(){var n=document.createElement("nav");return n.innerHTML=c.innerHTML,n}}])&&s(e.prototype,t),n}();function u(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var A=document.createElement("template");A.innerHTML='\n  <div id="theClub" class="hero">\n    <div class="hero__image the-club">\n      <h2 class="hero__title">The Club</h2>\n      <p class="hero__content">Social distancing never become so friendly, come to one of our clubs and discover open, well-ventilated, areas to enjoy with family and friends.</p>\n    </div>\n  </div>\n\n  <div id="theBreakfast" class="hero offscreen">\n    <div class="hero__image the-breakfast">\n      <h2 class="hero__title">The Breakfast</h2>\n      <p class="hero__content">All natural, prepared at the moment, delicius and nutritive breakfast. Ask for the Chef\'s recomendation, we are sure you\'ll be delight and surprised.</p>\n    </div>\n  </div>\n\n  <div id="ourLocations" class="hero offscreen">\n    <div class="hero__image our-locations">\n      <h2 class="hero__title">Our Locations</h2>\n      <p class="hero__content">Come to Edmonton, Alberta, there is always one Breakfast Club near you. We are located in almost every corner of our Downtown.</p>\n    </div>\n  </div>\n';const d=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n)}var e,t;return e=n,(t=[{key:"hero",value:function(){var n=document.createElement("div");return n.innerHTML=A.innerHTML,n}}])&&u(e.prototype,t),n}();var f=document.querySelector(".content");f.appendChild((new l).navbar()),f.appendChild((new d).hero()),(0,i.Z)()},535:(n,e,t)=>{function r(n){return function(n){if(Array.isArray(n))return o(n)}(n)||function(n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n))return Array.from(n)}(n)||function(n,e){if(n){if("string"==typeof n)return o(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?o(n,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,{Z:()=>a});const a=function(){var n=r(document.getElementsByClassName("menu__link"));n.forEach((function(e){e.addEventListener("click",(function(t){var o=r(document.getElementsByClassName("hero")),a=e.dataset.type;o.forEach((function(n){n.classList.add("offscreen")})),n.forEach((function(n){n.classList.remove("active")})),document.getElementById(a).classList.remove("offscreen"),t.currentTarget.classList.add("active")}))}))}},334:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".hero {\n  position: relative;\n  padding: 0 30px;\n  margin: auto;\n}\n\n.hero__image {\n  background-size: cover;\n  position: absolute;\n  top: 0px;\n  left: 30px;\n  right: 30px;\n  border-radius: 10px;\n  margin: auto;\n  padding: 100px 0;\n}\n\n.hero__title {\n  font-family: 'Chango', cursive;\n  font-size: 3rem;\n}\n\n.hero__content {\n  font-family: 'Helvetica', sans-serif;\n  font-weight: 700;\n  width: 500px;\n  padding: 30px;\n  margin: 30px auto;\n  border: 1px solid #fff;\n  border-radius: 5px;\n  background-color: rgba(0, 0, 0, 0.3); \n}\n\n.hero__title,\n.hero__content {\n  color: #FFF;\n  text-align: center;\n}\n\n.the-club {\n  background: url('//images.unsplash.com/photo-1507914464562-6ff4ac29692f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.the-breakfast {\n  background: url('//images.unsplash.com/photo-1495214783159-3503fd1b572d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80') 50% 50% no-repeat;\n}\n\n.our-locations {\n  background: url('//images.unsplash.com/photo-1580280126518-3bcec8e0492b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.offscreen {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n","",{version:3,sources:["webpack://./src/hero.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,WAAW;EACX,mBAAmB;EACnB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,8BAA8B;EAC9B,eAAe;AACjB;;AAEA;EACE,oCAAoC;EACpC,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,iBAAiB;EACjB,sBAAsB;EACtB,kBAAkB;EAClB,oCAAoC;AACtC;;AAEA;;EAEE,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,qKAAqK;AACvK;;AAEA;EACE,qKAAqK;AACvK;;AAEA;EACE,qKAAqK;AACvK;;AAEA;EACE,SAAS;EACT,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,UAAU;EACV,kBAAkB;EAClB,UAAU;AACZ",sourcesContent:[".hero {\n  position: relative;\n  padding: 0 30px;\n  margin: auto;\n}\n\n.hero__image {\n  background-size: cover;\n  position: absolute;\n  top: 0px;\n  left: 30px;\n  right: 30px;\n  border-radius: 10px;\n  margin: auto;\n  padding: 100px 0;\n}\n\n.hero__title {\n  font-family: 'Chango', cursive;\n  font-size: 3rem;\n}\n\n.hero__content {\n  font-family: 'Helvetica', sans-serif;\n  font-weight: 700;\n  width: 500px;\n  padding: 30px;\n  margin: 30px auto;\n  border: 1px solid #fff;\n  border-radius: 5px;\n  background-color: rgba(0, 0, 0, 0.3); \n}\n\n.hero__title,\n.hero__content {\n  color: #FFF;\n  text-align: center;\n}\n\n.the-club {\n  background: url('//images.unsplash.com/photo-1507914464562-6ff4ac29692f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.the-breakfast {\n  background: url('//images.unsplash.com/photo-1495214783159-3503fd1b572d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80') 50% 50% no-repeat;\n}\n\n.our-locations {\n  background: url('//images.unsplash.com/photo-1580280126518-3bcec8e0492b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.offscreen {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n"],sourceRoot:""}]);const s=i},150:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(15),o=t.n(r),a=t(645),i=t.n(a),s=t(592),c=t(334),l=i()(o());l.push([n.id,"@import url(https://cdn.jsdelivr.net/gh/jgthms/minireset.css@master/minireset.min.css);"]),l.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Chango&display=swap);"]),l.i(s.Z),l.i(c.Z),l.push([n.id,"body {\n  min-width: 768px;\n}\n","",{version:3,sources:["webpack://./src/main.css"],names:[],mappings:"AAKA;EACE,gBAAgB;AAClB",sourcesContent:["@import url(\"https://cdn.jsdelivr.net/gh/jgthms/minireset.css@master/minireset.min.css\");\n@import url('https://fonts.googleapis.com/css2?family=Chango&display=swap');\n@import url('./navbar.css');\n@import url('./hero.css');\n\nbody {\n  min-width: 768px;\n}\n"],sourceRoot:""}]);const u=l},592:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".navbar,\n.navbar__brand,\n.navbar__menu {\n  display: flex;\n  align-items: center;\n}\n\n.navbar__brand,\n.menu__link {\n  text-decoration: none;\n}\n\n.navbar {\n  height: 50px;\n  padding: 0px 30px;\n  justify-content: space-between;\n}\n\n.navbar__brand,\n.menu__link {\n  font-family: Helvetica, 'sans-serif';\n}\n\n.navbar__brand {\n  font-weight: 700;\n}\n\n.brand__logo {\n  height: 24px;\n  margin-right: 10px;\n}\n\n.menu__link {\n  color: #949396;\n}\n\n.navbar__brand,\n.menu__link:hover,\n.menu__link.active {\n  color: #000;\n}\n\n.menu__item {\n  list-style-type: none;\n}\n\n.menu__link {\n  margin: 0 5px;\n}\n","",{version:3,sources:["webpack://./src/navbar.css"],names:[],mappings:"AAAA;;;EAGE,aAAa;EACb,mBAAmB;AACrB;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,8BAA8B;AAChC;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".navbar,\n.navbar__brand,\n.navbar__menu {\n  display: flex;\n  align-items: center;\n}\n\n.navbar__brand,\n.menu__link {\n  text-decoration: none;\n}\n\n.navbar {\n  height: 50px;\n  padding: 0px 30px;\n  justify-content: space-between;\n}\n\n.navbar__brand,\n.menu__link {\n  font-family: Helvetica, 'sans-serif';\n}\n\n.navbar__brand {\n  font-weight: 700;\n}\n\n.brand__logo {\n  height: 24px;\n  margin-right: 10px;\n}\n\n.menu__link {\n  color: #949396;\n}\n\n.navbar__brand,\n.menu__link:hover,\n.menu__link.active {\n  color: #000;\n}\n\n.menu__item {\n  list-style-type: none;\n}\n\n.menu__link {\n  margin: 0 5px;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,o=!1,a=void 0;try{for(var i,s=n[Symbol.iterator]();!(r=(i=s.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){o=!0,a=n}finally{try{r||null==s.return||s.return()}finally{if(o)throw a}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function i(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],o=0;o<n.length;o++){var s=n[o],c=e.base?s[0]+e.base:s[0],l=t[c]||0,u="".concat(c," ").concat(l);t[c]=l+1;var A=i(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(a[A].references++,a[A].updater(d)):a.push({identifier:u,updater:m(d,e),references:1}),r.push(u)}return r}function c(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=o(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var l,u=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function A(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function d(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,p=0;function m(n,e){var t,r,o;if(e.singleton){var a=p++;t=f||(f=c(e)),r=A.bind(null,t,a,!1),o=A.bind(null,t,a,!0)}else t=c(e),r=d.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var c=s(n,e),l=0;l<t.length;l++){var u=i(t[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=c}}}}},e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t(387),t(535)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,