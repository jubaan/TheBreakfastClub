(()=>{"use strict";var n={387:(n,e,t)=>{var r=t(379),a=t.n(r),o=t(150);a()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;var i=t(535),s=document.createElement("template");s.innerHTML='\n  <nav class="navbar">\n    <a class="navbar__brand" href="./index.html">\n      <img class="brand__logo" src="https://img.icons8.com/ios/32/000000/coffee-to-go.png"/>\n      <img class="brand__logo" src="https://img.icons8.com/ios/50/000000/bread-loaf.png"/>\n      <img class="brand__logo" src="https://img.icons8.com/ios/50/000000/sunny-side-up-eggs.png"/>\n      BREAKFAST CLUB\n    </a>\n\n    <ul class="navbar__menu">\n      <li class="menu__item"><a class="menu__link active" href="#" onclick="switchTab(event, \'theClub\')">The Club</a></li>\n      <li class="menu__item"><a class="menu__link" href="#" onclick="switchTab(event, \'theBreakfast\')">The Breakfast</a></li>\n      <li class="menu__item"><a class="menu__link" href="#" onclick="switchTab(event, \'ourLocations\')">Our Locations</a></li>\n    </ul>\n  </nav>\n  <script src="./switchTab"><\/script>\n';var c=document.createElement("template");c.innerHTML='\n  <div id="theClub" class="hero">\n    <div class="hero__image the-club">\n      <h2 class="hero__title">\n      The<br>Breakfast<br>Club</h2>\n      <h3></h3>\n      <p>prepared with only natural </p>\n    </div>\n  </div>\n\n  <div id="theBreakfast" class="hero offscreen">\n    <div class="hero__image the-breakfast">\n      <h2 class="hero__title">Breakfast</h2>\n      <h3></h3>\n      <p>hello with only natural </p>\n    </div>\n  </div>\n\n  <div id="ourLocations" class="hero offscreen">\n    <div class="hero__image our-locations">\n      <h2 class="hero__title">Breakfast</h2>\n      <h3></h3>\n      <p>ready with only natural </p>\n    </div>\n  </div>\n';var l,A,u=document.querySelector(".content");u.appendChild(((A=document.createElement("nav")).innerHTML=s.innerHTML,A)),u.appendChild(((l=document.createElement("div")).innerHTML=c.innerHTML,l)),(0,i.Z)()},535:(n,e,t)=>{t.d(e,{Z:()=>r});const r=function(){document.getElementsByClassName("menu__link")}},334:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,".hero {\n  position: relative;\n  padding: 0 30px;\n  margin: auto;\n  height: 94.8vh;\n}\n\n.hero__image {\n  background-size: cover;\n  position: absolute;\n  top: 0px;\n  left: 30px;\n  right: 30px;\n  bottom: 30px;\n  border-radius: 10px;\n  margin: auto;\n}\n\n.hero__title {\n  font-family: 'Chango', cursive;\n  font-size: 6rem;\n  color: #FFF;\n  text-align: center;\n}\n\n.the-club {\n  background: url('https://images.unsplash.com/photo-1507914464562-6ff4ac29692f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.the-breakfast {\n  background: url('https://images.unsplash.com/photo-1495214783159-3503fd1b572d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80') 50% 50% no-repeat;\n}\n\n.our-locations {\n  background: url('https://images.unsplash.com/photo-1580280126518-3bcec8e0492b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.offscreen {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n","",{version:3,sources:["webpack://./src/hero.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,eAAe;EACf,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,2KAA2K;AAC7K;;AAEA;EACE,2KAA2K;AAC7K;;AAEA;EACE,2KAA2K;AAC7K;;AAEA;EACE,SAAS;EACT,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,UAAU;EACV,kBAAkB;EAClB,UAAU;AACZ",sourcesContent:[".hero {\n  position: relative;\n  padding: 0 30px;\n  margin: auto;\n  height: 94.8vh;\n}\n\n.hero__image {\n  background-size: cover;\n  position: absolute;\n  top: 0px;\n  left: 30px;\n  right: 30px;\n  bottom: 30px;\n  border-radius: 10px;\n  margin: auto;\n}\n\n.hero__title {\n  font-family: 'Chango', cursive;\n  font-size: 6rem;\n  color: #FFF;\n  text-align: center;\n}\n\n.the-club {\n  background: url('https://images.unsplash.com/photo-1507914464562-6ff4ac29692f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.the-breakfast {\n  background: url('https://images.unsplash.com/photo-1495214783159-3503fd1b572d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80') 50% 50% no-repeat;\n}\n\n.our-locations {\n  background: url('https://images.unsplash.com/photo-1580280126518-3bcec8e0492b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2134&q=80') 50% 50% no-repeat;\n}\n\n.offscreen {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n"],sourceRoot:""}]);const s=i},150:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),a=t.n(r),o=t(645),i=t.n(o),s=t(592),c=t(334),l=i()(a());l.push([n.id,"@import url(https://cdn.jsdelivr.net/gh/jgthms/minireset.css@master/minireset.min.css);"]),l.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Chango&display=swap);"]),l.i(s.Z),l.i(c.Z),l.push([n.id,"\n\n","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const A=l},592:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,".navbar,\n.navbar__brand,\n.navbar__menu {\n  display: flex;\n  align-items: center;\n}\n\n.navbar__brand,\n.menu__link {\n  text-decoration: none;\n}\n\n.navbar {\n  height: 50px;\n  padding: 0px 30px;\n  justify-content: space-between;\n}\n\n.navbar__brand,\n.menu__link {\n  font-family: Helvetica, 'sans-serif';\n}\n\n.navbar__brand {\n  font-weight: 700;\n}\n\n.brand__logo {\n  height: 24px;\n  margin-right: 10px;\n}\n\n.menu__link {\n  color: #949396;\n}\n\n.navbar__brand,\n.menu__link:hover,\n.menu__link.active {\n  color: #000;\n}\n\n.menu__item {\n  list-style-type: none;\n}\n\n.menu__link {\n  margin: 0 5px;\n}\n","",{version:3,sources:["webpack://./src/navbar.css"],names:[],mappings:"AAAA;;;EAGE,aAAa;EACb,mBAAmB;AACrB;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,8BAA8B;AAChC;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".navbar,\n.navbar__brand,\n.navbar__menu {\n  display: flex;\n  align-items: center;\n}\n\n.navbar__brand,\n.menu__link {\n  text-decoration: none;\n}\n\n.navbar {\n  height: 50px;\n  padding: 0px 30px;\n  justify-content: space-between;\n}\n\n.navbar__brand,\n.menu__link {\n  font-family: Helvetica, 'sans-serif';\n}\n\n.navbar__brand {\n  font-weight: 700;\n}\n\n.brand__logo {\n  height: 24px;\n  margin-right: 10px;\n}\n\n.menu__link {\n  color: #949396;\n}\n\n.navbar__brand,\n.menu__link:hover,\n.menu__link.active {\n  color: #000;\n}\n\n.menu__item {\n  list-style-type: none;\n}\n\n.menu__link {\n  margin: 0 5px;\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&a[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,a=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],r=!0,a=!1,o=void 0;try{for(var i,s=n[Symbol.iterator]();!(r=(i=s.next()).done)&&(t.push(i.value),!e||t.length!==e);r=!0);}catch(n){a=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return t}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),A=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[o].concat(A).concat([l]).join("\n")}return[o].join("\n")}},379:(n,e,t)=>{var r,a=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),o=[];function i(n){for(var e=-1,t=0;t<o.length;t++)if(o[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],a=0;a<n.length;a++){var s=n[a],c=e.base?s[0]+e.base:s[0],l=t[c]||0,A="".concat(c," ").concat(l);t[c]=l+1;var u=i(A),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:A,updater:f(d,e),references:1}),r.push(A)}return r}function c(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var l,A=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function u(n,e,t,r){var a=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=A(e,a);else{var o=document.createTextNode(a),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(o,i[e]):n.appendChild(o)}}function d(n,e,t){var r=t.css,a=t.media,o=t.sourceMap;if(a?n.setAttribute("media",a):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var p=null,h=0;function f(n,e){var t,r,a;if(e.singleton){var o=h++;t=p||(p=c(e)),r=u.bind(null,t,o,!1),a=u.bind(null,t,o,!0)}else t=c(e),r=d.bind(null,t,e),a=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else a()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var a=i(t[r]);o[a].references--}for(var c=s(n,e),l=0;l<t.length;l++){var A=i(t[l]);0===o[A].references&&(o[A].updater(),o.splice(A,1))}t=c}}}}},e={};function t(r){if(e[r])return e[r].exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t(387),t(535)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,